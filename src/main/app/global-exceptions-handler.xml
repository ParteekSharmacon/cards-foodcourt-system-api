<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
	xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
	<apikit:mapping-exception-strategy
		name="Global_Exception_Strategy">

		<apikit:mapping statusCode="500">
			<apikit:exception
				value="com.mulesoft.weave.mule.exception.WeaveExecutionException" />
			<apikit:exception value="java.net.ConnectException" />
			<apikit:exception
				value="org.mule.module.http.internal.request.ResponseValidatorException" />
			<apikit:exception
				value="org.mule.module.db.internal.domain.connection.ConnectionCreationException" />
			<apikit:exception value="java.sql.SQLException" />
			<apikit:exception value="org.mule.api.lifecycle.LifecycleException" />
			<apikit:exception value="java.sql.SQLIntegrityConstraintViolationException" />
			<logger
				message="***************** Begin of the #[mule:context.serviceName] with unique messageId: #[sessionVars.messageId] ******************"
				level="INFO" doc:name="Init Beginning Of Logger With Flowname And MessageId" />
			<set-variable variableName="exceptionPayload"
				value="#[exception.getSummaryMessage()]" doc:name="Save Exception Payload - Variable" />
			<set-property propertyName="http.status" value="500"
				doc:name="Set Status Code - Prop" />
			<object-to-string-transformer doc:name="StreamObj To String" />
			<async doc:name="Async">
				<message-properties-transformer
					scope="invocation" doc:name="Set Status Msg And Code - Msg Prop">
					<add-message-property key="external_channel_message"
						value="#[exception.getMessage()]" />
					<add-message-property key="external_channel_code"
						value="500" />
				</message-properties-transformer>
				<set-payload value="#[exception.getSummaryMessage()]"
					doc:name="Set Exception Payload" />
				<flow-ref name="pushResMsgQueueSubFlow" doc:name="Invoke Logger Response Metadata Flow" />
			</async>
			<dw:transform-message doc:name="Prepare Custom Error Payload">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
       merchant_channel_name: sessionVars.originalReqPayload.source_channel_name as :string,
       external_channel_name: sessionVars.originalReqPayload.target_channel_name as :string,
       external_error_code: payload.external_error_code when payload.external_error_code !=null 
       otherwise "500",
       external_error_message: payload.external_error_code when payload.external_error_code !=null 
       otherwise "Internal server error"
}]]></dw:set-payload>
			</dw:transform-message>

			<flow-ref name="fetchCustomErrorPayloadMetadataSubFlow"
				doc:name="Invoke Custom Error SubFlow" />
			<dw:transform-message doc:name="Set Payload">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
       statusCode: payload.merchant_error_code,
       statusMessage: payload.merchant_error_message as :string,
       target_channel_name: sessionVars.originalReqPayload.target_channel_name as :string,
       fields: [ ]
}]]></dw:set-payload>
			</dw:transform-message>
			<async doc:name="Async">
				<expression-filter expression="#[flowVars.mailNotification == 1]"
					doc:name="Validate Mail Notification Flag" />
				<flow-ref name="pushMailNotificationFlow" doc:name="Invoke Mail Notification Framework" />
			</async>
			<logger
				message="***************** End of the #[mule:context.serviceName] with unique messageId: #[sessionVars.messageId] ******************"
				level="INFO" doc:name="Init End Of Logger With Flowname And MessageId" />

		</apikit:mapping>
		<apikit:mapping statusCode="404">
			<apikit:exception
				value="org.mule.module.apikit.exception.NotFoundException" />
			<logger
				message="***************** Begin of the #[mule:context.serviceName] with unique messageId: #[sessionVars.messageId] ******************"
				level="INFO" doc:name="Init Beginning Of Logger With Flowname And MessageId" />
			<set-variable variableName="exceptionPayload"
				value="#[exception.getSummaryMessage()]" doc:name="Save Exception Payload - Variable" />
			<set-property propertyName="http.status" value="404"
				doc:name="Set Status Code - Prop" />
			<object-to-string-transformer doc:name="StreamObj To String" />
			<async doc:name="Async">
				<message-properties-transformer
					scope="invocation" doc:name="Set Status Msg And Code - Msg Prop">
					<add-message-property key="external_channel_message"
						value="#[exception.getMessage()]" />
					<add-message-property key="external_channel_code"
						value="500" />
				</message-properties-transformer>
				<set-payload value="#[exception.getSummaryMessage()]"
					doc:name="Set Exception Payload" />
				<flow-ref name="pushResMsgQueueSubFlow" doc:name="Invoke Logger Response Metadata Flow" />
			</async>
			<dw:transform-message doc:name="Prepare Custom Error Payload">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
       merchant_channel_name: sessionVars.originalReqPayload.source_channel_name as :string,
       external_channel_name: sessionVars.originalReqPayload.target_channel_name as :string,
       external_error_code: payload.external_error_code when payload.external_error_code !=null 
       otherwise "404",
       external_error_message: payload.external_error_code when payload.external_error_code !=null 
       otherwise "Not Found Exception"
}]]></dw:set-payload>
			</dw:transform-message>

			<flow-ref name="fetchCustomErrorPayloadMetadataSubFlow"
				doc:name="Invoke Custom Error SubFlow" />
			<dw:transform-message doc:name="Set Payload">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
       statusCode: payload.merchant_error_code,
       statusMessage: payload.merchant_error_message as :string,
       target_channel_name: sessionVars.originalReqPayload.target_channel_name as :string,
       fields: [ ]
}]]></dw:set-payload>
			</dw:transform-message>
			<async doc:name="Async">
				<expression-filter expression="#[flowVars.mailNotification == 1]"
					doc:name="Validate Mail Notification Flag" />
				<flow-ref name="pushMailNotificationFlow" doc:name="Invoke Mail Notification Framework" />
			</async>
			<logger
				message="***************** End of the #[mule:context.serviceName] with unique messageId: #[sessionVars.messageId] ******************"
				level="INFO" doc:name="Init End Of Logger With Flowname And MessageId" />
		</apikit:mapping>
		<apikit:mapping statusCode="405">
			<apikit:exception
				value="org.mule.module.apikit.exception.MethodNotAllowedException" />
			<logger
				message="***************** Begin of the #[mule:context.serviceName] with unique messageId: #[sessionVars.messageId] ******************"
				level="INFO" doc:name="Init Beginning Of Logger With Flowname And MessageId" />
			<set-variable variableName="exceptionPayload"
				value="#[exception.getSummaryMessage()]" doc:name="Save Exception Payload - Variable" />
			<set-property propertyName="http.status" value="405"
				doc:name="Set Status Code - Prop" />
			<object-to-string-transformer doc:name="StreamObj To String" />
			<async doc:name="Async">
				<message-properties-transformer
					scope="invocation" doc:name="Set Status Msg And Code - Msg Prop">
					<add-message-property key="external_channel_message"
						value="#[exception.getMessage()]" />
					<add-message-property key="external_channel_code"
						value="500" />
				</message-properties-transformer>
				<set-payload value="#[exception.getSummaryMessage()]"
					doc:name="Set Exception Payload" />
				<flow-ref name="pushResMsgQueueSubFlow" doc:name="Invoke Logger Response Metadata Flow" />
			</async>
			<dw:transform-message doc:name="Prepare Custom Error Payload">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
       merchant_channel_name: sessionVars.originalReqPayload.source_channel_name as :string,
       external_channel_name: sessionVars.originalReqPayload.target_channel_name as :string,
       external_error_code: payload.external_error_code when payload.external_error_code !=null 
       otherwise "405",
       external_error_message: payload.external_error_code when payload.external_error_code !=null 
       otherwise "Method Not allowed"
}]]></dw:set-payload>
			</dw:transform-message>

			<flow-ref name="fetchCustomErrorPayloadMetadataSubFlow"
				doc:name="Invoke Custom Error SubFlow" />
			<dw:transform-message doc:name="Set Payload">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
       statusCode: payload.merchant_error_code,
       statusMessage: payload.merchant_error_message as :string,
       target_channel_name: sessionVars.originalReqPayload.target_channel_name as :string,
       fields: [ ]
}]]></dw:set-payload>
			</dw:transform-message>
			<async doc:name="Async">
				<expression-filter expression="#[flowVars.mailNotification == 1]"
					doc:name="Validate Mail Notification Flag" />
				<flow-ref name="pushMailNotificationFlow" doc:name="Invoke Mail Notification Framework" />
			</async>
			<logger
				message="***************** End of the #[mule:context.serviceName] with unique messageId: #[sessionVars.messageId] ******************"
				level="INFO" doc:name="Init End Of Logger With Flowname And MessageId" />
		</apikit:mapping>
		<apikit:mapping statusCode="415">
			<apikit:exception
				value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
			<logger
				message="***************** Begin of the #[mule:context.serviceName] with unique messageId: #[sessionVars.messageId] ******************"
				level="INFO" doc:name="Init Beginning Of Logger With Flowname And MessageId" />
			<set-variable variableName="exceptionPayload"
				value="#[exception.getSummaryMessage()]" doc:name="Save Exception Payload - Variable" />
			<set-property propertyName="http.status" value="415"
				doc:name="Set Status Code - Prop" />
			<object-to-string-transformer doc:name="StreamObj To String" />
			<async doc:name="Async">
				<message-properties-transformer
					scope="invocation" doc:name="Set Status Msg And Code - Msg Prop">
					<add-message-property key="external_channel_message"
						value="#[exception.getMessage()]" />
					<add-message-property key="external_channel_code"
						value="500" />
				</message-properties-transformer>
				<set-payload value="#[exception.getSummaryMessage()]"
					doc:name="Set Exception Payload" />
				<flow-ref name="pushResMsgQueueSubFlow" doc:name="Invoke Logger Response Metadata Flow" />
			</async>
			<dw:transform-message doc:name="Prepare Custom Error Payload">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
       merchant_channel_name: sessionVars.originalReqPayload.source_channel_name as :string,
       external_channel_name: sessionVars.originalReqPayload.target_channel_name as :string,
       external_error_code: payload.external_error_code when payload.external_error_code !=null 
       otherwise "415",
       external_error_message: payload.external_error_code when payload.external_error_code !=null 
       otherwise "Unsupported Media Type"
}]]></dw:set-payload>
			</dw:transform-message>

			<flow-ref name="fetchCustomErrorPayloadMetadataSubFlow"
				doc:name="Invoke Custom Error SubFlow" />
			<dw:transform-message doc:name="Set Payload">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
       statusCode: payload.merchant_error_code,
       statusMessage: payload.merchant_error_message as :string,
       target_channel_name: sessionVars.originalReqPayload.target_channel_name as :string,
       fields: [ ]
}]]></dw:set-payload>
			</dw:transform-message>
			<async doc:name="Async">
				<expression-filter expression="#[flowVars.mailNotification == 1]"
					doc:name="Validate Mail Notification Flag" />
				<flow-ref name="pushMailNotificationFlow" doc:name="Invoke Mail Notification Framework" />
			</async>
			<logger
				message="***************** End of the #[mule:context.serviceName] with unique messageId: #[sessionVars.messageId] ******************"
				level="INFO" doc:name="Init End Of Logger With Flowname And MessageId" />
		</apikit:mapping>
		<apikit:mapping statusCode="406">
			<apikit:exception
				value="org.mule.module.apikit.exception.NotAcceptableException" />
			<logger
				message="***************** Begin of the #[mule:context.serviceName] with unique messageId: #[sessionVars.messageId] ******************"
				level="INFO" doc:name="Init Beginning Of Logger With Flowname And MessageId" />
			<set-variable variableName="exceptionPayload"
				value="#[exception.getSummaryMessage()]" doc:name="Save Exception Payload - Variable" />
			<set-property propertyName="http.status" value="406"
				doc:name="Set Status Code - Prop" />
			<object-to-string-transformer doc:name="StreamObj To String" />
			<async doc:name="Async">
				<message-properties-transformer
					scope="invocation" doc:name="Set Status Msg And Code - Msg Prop">
					<add-message-property key="external_channel_message"
						value="#[exception.getMessage()]" />
					<add-message-property key="external_channel_code"
						value="500" />
				</message-properties-transformer>
				<set-payload value="#[exception.getSummaryMessage()]"
					doc:name="Set Exception Payload" />
				<flow-ref name="pushResMsgQueueSubFlow" doc:name="Invoke Logger Response Metadata Flow" />
			</async>
			<dw:transform-message doc:name="Prepare Custom Error Payload">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
       merchant_channel_name: sessionVars.originalReqPayload.source_channel_name as :string,
       external_channel_name: sessionVars.originalReqPayload.target_channel_name as :string,
       external_error_code: payload.external_error_code when payload.external_error_code !=null 
       otherwise "406",
       external_error_message: payload.external_error_code when payload.external_error_code !=null 
       otherwise "Not Acceptable Exception"
}]]></dw:set-payload>
			</dw:transform-message>

			<flow-ref name="fetchCustomErrorPayloadMetadataSubFlow"
				doc:name="Invoke Custom Error SubFlow" />
			<dw:transform-message doc:name="Set Payload">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
       statusCode: payload.merchant_error_code,
       statusMessage: payload.merchant_error_message as :string,
       target_channel_name: sessionVars.originalReqPayload.target_channel_name as :string,
       fields: [ ]
}]]></dw:set-payload>
			</dw:transform-message>
			<async doc:name="Async">
				<expression-filter expression="#[flowVars.mailNotification == 1]"
					doc:name="Validate Mail Notification Flag" />
				<flow-ref name="pushMailNotificationFlow" doc:name="Invoke Mail Notification Framework" />
			</async>
			<logger
				message="***************** End of the #[mule:context.serviceName] with unique messageId: #[sessionVars.messageId] ******************"
				level="INFO" doc:name="Init End Of Logger With Flowname And MessageId" />
		</apikit:mapping>
		<apikit:mapping statusCode="400">
			<apikit:exception
				value="org.mule.module.apikit.exception.BadRequestException" />
			<apikit:exception value="org.mule.transport.NullPayload" />
			<apikit:exception
				value="org.mule.module.apikit.exception.InvalidQueryParameterException" />
			<logger
				message="***************** Begin of the #[mule:context.serviceName] with unique messageId: #[sessionVars.messageId] ******************"
				level="INFO" doc:name="Init Beginning Of Logger With Flowname And MessageId" />
			<set-variable variableName="exceptionPayload"
				value="#[exception.getSummaryMessage()]" doc:name="Save Exception Payload - Variable" />
			<set-property propertyName="http.status" value="400"
				doc:name="Set Status Code - Prop" />
			<object-to-string-transformer doc:name="StreamObj To String" />
			<async doc:name="Async">
				<message-properties-transformer
					scope="invocation" doc:name="Set Status Msg And Code - Msg Prop">
					<add-message-property key="external_channel_message"
						value="#[exception.getMessage()]" />
					<add-message-property key="external_channel_code"
						value="500" />
				</message-properties-transformer>
				<set-payload value="#[exception.getSummaryMessage()]"
					doc:name="Set Exception Payload" />
				<flow-ref name="pushResMsgQueueSubFlow" doc:name="Invoke Logger Response Metadata Flow" />
			</async>
			<dw:transform-message doc:name="Prepare Custom Error Payload">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
       merchant_channel_name: sessionVars.originalReqPayload.source_channel_name as :string,
       external_channel_name: sessionVars.originalReqPayload.target_channel_name as :string,
       external_error_code: payload.external_error_code when payload.external_error_code !=null 
       otherwise "400",
       external_error_message: payload.external_error_code when payload.external_error_code !=null 
       otherwise "Bad Request"
}]]></dw:set-payload>
			</dw:transform-message>

			<flow-ref name="fetchCustomErrorPayloadMetadataSubFlow"
				doc:name="Invoke Custom Error SubFlow" />
			<dw:transform-message doc:name="Set Payload">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
       statusCode: payload.merchant_error_code,
       statusMessage: payload.merchant_error_message as :string,
       target_channel_name: sessionVars.originalReqPayload.target_channel_name as :string,
       fields: [ ]
}]]></dw:set-payload>
			</dw:transform-message>
			<async doc:name="Async">
				<expression-filter expression="#[flowVars.mailNotification == 1]"
					doc:name="Validate Mail Notification Flag" />
				<flow-ref name="pushMailNotificationFlow" doc:name="Invoke Mail Notification Framework" />
			</async>
			<logger
				message="***************** End of the #[mule:context.serviceName] with unique messageId: #[sessionVars.messageId] ******************"
				level="INFO" doc:name="Init End Of Logger With Flowname And MessageId" />
		</apikit:mapping>
		<apikit:mapping statusCode="401">
			<apikit:exception value="org.mule.api.security.UnauthorisedException" />
			<apikit:exception
				value="org.springframework.security.authentication.BadCredentialsException" />
			<logger
				message="***************** Begin of the #[mule:context.serviceName] with unique messageId: #[sessionVars.messageId] ******************"
				level="INFO" doc:name="Init Beginning Of Logger With Flowname And MessageId" />
			<set-variable variableName="exceptionPayload"
				value="#[exception.getSummaryMessage()]" doc:name="Save Exception Payload - Variable" />
			<set-property propertyName="http.status" value="400"
				doc:name="Set Status Code - Prop" />
			<object-to-string-transformer doc:name="StreamObj To String" />
			<async doc:name="Async">
				<message-properties-transformer
					scope="invocation" doc:name="Set Status Msg And Code - Msg Prop">
					<add-message-property key="external_channel_message"
						value="#[exception.getMessage()]" />
					<add-message-property key="external_channel_code"
						value="500" />
				</message-properties-transformer>
				<set-payload value="#[exception.getSummaryMessage()]"
					doc:name="Set Exception Payload" />
				<flow-ref name="pushResMsgQueueSubFlow" doc:name="Invoke Logger Response Metadata Flow" />
			</async>
			<dw:transform-message doc:name="Prepare Custom Error Payload">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
       merchant_channel_name: sessionVars.originalReqPayload.source_channel_name as :string,
       external_channel_name: sessionVars.originalReqPayload.target_channel_name as :string,
       external_error_code: payload.external_error_code when payload.external_error_code !=null 
       otherwise "401",
       external_error_message: payload.external_error_code when payload.external_error_code !=null 
       otherwise "Unauthorized"
}]]></dw:set-payload>
			</dw:transform-message>

			<flow-ref name="fetchCustomErrorPayloadMetadataSubFlow"
				doc:name="Invoke Custom Error SubFlow" />
			<dw:transform-message doc:name="Set Payload">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
       statusCode: payload.merchant_error_code,
       statusMessage: payload.merchant_error_message as :string,
       target_channel_name: sessionVars.originalReqPayload.target_channel_name as :string,
       fields: [ ]
}]]></dw:set-payload>
			</dw:transform-message>
			<async doc:name="Async">
				<expression-filter expression="#[flowVars.mailNotification == 1]"
					doc:name="Validate Mail Notification Flag" />
				<flow-ref name="pushMailNotificationFlow" doc:name="Invoke Mail Notification Framework" />
			</async>
			<logger
				message="***************** End of the #[mule:context.serviceName] with unique messageId: #[sessionVars.messageId] ******************"
				level="INFO" doc:name="Init End Of Logger With Flowname And MessageId" />
		</apikit:mapping>
		<apikit:mapping statusCode="403">
			<apikit:exception value="java.io.IOException" />
			<logger
				message="***************** Begin of the #[mule:context.serviceName] with unique messageId: #[sessionVars.messageId] ******************"
				level="INFO" doc:name="Init Beginning Of Logger With Flowname And MessageId" />
			<set-variable variableName="exceptionPayload"
				value="#[exception.getSummaryMessage()]" doc:name="Save Exception Payload - Variable" />
			<set-property propertyName="http.status" value="404"
				doc:name="Set Status Code - Prop" />
			<object-to-string-transformer doc:name="StreamObj To String" />
			<async doc:name="Async">
				<message-properties-transformer
					scope="invocation" doc:name="Set Status Msg And Code - Msg Prop">
					<add-message-property key="external_channel_message"
						value="#[exception.getMessage()]" />
					<add-message-property key="external_channel_code"
						value="500" />
				</message-properties-transformer>
				<set-payload value="#[exception.getSummaryMessage()]"
					doc:name="Set Exception Payload" />
				<flow-ref name="pushResMsgQueueSubFlow" doc:name="Invoke Logger Response Metadata Flow" />
			</async>
			<dw:transform-message doc:name="Prepare Custom Error Payload">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
       merchant_channel_name: sessionVars.originalReqPayload.source_channel_name as :string,
       external_channel_name: sessionVars.originalReqPayload.target_channel_name as :string,
       external_error_code: payload.external_error_code when payload.external_error_code !=null 
       otherwise "403",
       external_error_message: payload.external_error_code when payload.external_error_code !=null 
       otherwise "Forbidden Error"
}]]></dw:set-payload>
			</dw:transform-message>

			<flow-ref name="fetchCustomErrorPayloadMetadataSubFlow"
				doc:name="Invoke Custom Error SubFlow" />
			<dw:transform-message doc:name="Set Payload">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
       statusCode: payload.merchant_error_code,
       statusMessage: payload.merchant_error_message as :string,
       target_channel_name: sessionVars.originalReqPayload.target_channel_name as :string,
       fields: [ ]
}]]></dw:set-payload>
			</dw:transform-message>
			<async doc:name="Async">
				<expression-filter expression="#[flowVars.mailNotification == 1]"
					doc:name="Validate Mail Notification Flag" />
				<flow-ref name="pushMailNotificationFlow" doc:name="Invoke Mail Notification Framework" />
			</async>
			<logger
				message="***************** End of the #[mule:context.serviceName] with unique messageId: #[sessionVars.messageId] ******************"
				level="INFO" doc:name="Init End Of Logger With Flowname And MessageId" />
		</apikit:mapping>
		
	</apikit:mapping-exception-strategy>
</mule>

